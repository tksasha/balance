// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/interfaces.go
//
// Generated by this command:
//
//	mockgen -source internal/services/interfaces.go -package mocks -destination mocks/services/interfaces.mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/tksasha/balance/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockItemGetter is a mock of ItemGetter interface.
type MockItemGetter struct {
	ctrl     *gomock.Controller
	recorder *MockItemGetterMockRecorder
}

// MockItemGetterMockRecorder is the mock recorder for MockItemGetter.
type MockItemGetterMockRecorder struct {
	mock *MockItemGetter
}

// NewMockItemGetter creates a new mock instance.
func NewMockItemGetter(ctrl *gomock.Controller) *MockItemGetter {
	mock := &MockItemGetter{ctrl: ctrl}
	mock.recorder = &MockItemGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemGetter) EXPECT() *MockItemGetterMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockItemGetter) GetItem(ctx context.Context, id string) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, id)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemGetterMockRecorder) GetItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemGetter)(nil).GetItem), ctx, id)
}

// MockItemUpdater is a mock of ItemUpdater interface.
type MockItemUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockItemUpdaterMockRecorder
}

// MockItemUpdaterMockRecorder is the mock recorder for MockItemUpdater.
type MockItemUpdaterMockRecorder struct {
	mock *MockItemUpdater
}

// NewMockItemUpdater creates a new mock instance.
func NewMockItemUpdater(ctrl *gomock.Controller) *MockItemUpdater {
	mock := &MockItemUpdater{ctrl: ctrl}
	mock.recorder = &MockItemUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemUpdater) EXPECT() *MockItemUpdaterMockRecorder {
	return m.recorder
}

// UpdateItem mocks base method.
func (m *MockItemUpdater) UpdateItem(ctx context.Context, item *models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemUpdaterMockRecorder) UpdateItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemUpdater)(nil).UpdateItem), ctx, item)
}

// MockItemDeleter is a mock of ItemDeleter interface.
type MockItemDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockItemDeleterMockRecorder
}

// MockItemDeleterMockRecorder is the mock recorder for MockItemDeleter.
type MockItemDeleterMockRecorder struct {
	mock *MockItemDeleter
}

// NewMockItemDeleter creates a new mock instance.
func NewMockItemDeleter(ctrl *gomock.Controller) *MockItemDeleter {
	mock := &MockItemDeleter{ctrl: ctrl}
	mock.recorder = &MockItemDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemDeleter) EXPECT() *MockItemDeleterMockRecorder {
	return m.recorder
}

// DeleteItem mocks base method.
func (m *MockItemDeleter) DeleteItem(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemDeleterMockRecorder) DeleteItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemDeleter)(nil).DeleteItem), ctx, id)
}
